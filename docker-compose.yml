version: '3.8'

services:
  # PostgreSQL database with pgvector
  db:
    build:
      context: .
      dockerfile: Dockerfile.database
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hipaa_qa}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-hipaa_qa}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - hipaa_network

  # Backend FastAPI service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    environment:
      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_EMBEDDING_MODEL: ${OPENAI_EMBEDDING_MODEL:-text-embedding-3-large}
      OPENAI_CHAT_MODEL: ${OPENAI_CHAT_MODEL:-gpt-4}
      
      # Database Configuration
      DB_HOST: db
      DB_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-hipaa_qa}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      
      # API Configuration
      API_HOST: 0.0.0.0
      API_PORT: 8000
      API_DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      
      # Vector Search Configuration
      EMBEDDING_DIMENSION: 3072
      SIMILARITY_THRESHOLD: 0.4
      MAX_CHUNKS_RETRIEVED: 5
      
      # Data Configuration
      CHUNKS_FILE: /app/data/clean/hipaa_rag_chunks.json
    # Remove external port exposure - access through nginx
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - hipaa_network
    volumes:
      - ./logs:/app/logs
      
  # Frontend Gradio service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    environment:
      BACKEND_URL: http://backend:8000
      GRADIO_HOST: 0.0.0.0
      GRADIO_PORT: 7860
      GRADIO_SHARE: ${GRADIO_SHARE:-false}
    # Remove external port exposure - access through nginx
    expose:
      - "7860"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7860"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - hipaa_network

  # Nginx reverse proxy
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - "80:80"
      - "${FRONTEND_PORT:-7860}:80"  # Map frontend port to nginx
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - hipaa_network
    volumes:
      - ./logs:/var/log/nginx

  # Cloudflare Tunnel for public access
  cloudflared:
    image: cloudflare/cloudflared:latest
    command: tunnel --no-autoupdate --url http://nginx:80
    depends_on:
      nginx:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - hipaa_network
    environment:
      - TUNNEL_METRICS=0.0.0.0:9126
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

volumes:
  postgres_data:
    driver: local

networks:
  hipaa_network:
    driver: bridge